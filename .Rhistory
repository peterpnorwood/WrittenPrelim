id = seqn,
corstr = "independence")
summary(msm_nb)
coef(msm_rf)
coef(msm_lm)
coef(msm_poisson)
coef(msm_nb)
## create plots showing the estimated relationship
smk_seq <- seq(min(newdat$smokeintensity)-2.5,
max(newdat$smokeintensity)+2.5,
length.out=1e3)
dummy1 <- data.frame(smokeintensity=smk_seq,method="Random Forest")
dummy1$p <- predict(msm_rf,newdata = dummy1)
dummy2 <- data.frame(smokeintensity=smk_seq,method="Normal")
dummy2$p <- predict(msm_lm,newdata = dummy2)
dummy3 <- data.frame(smokeintensity=smk_seq,method="Poisson")
dummy3$p <- predict(msm_poisson,newdata = dummy3)
dummy4 <- data.frame(smokeintensity=smk_seq,method="Negative Binomial")
dummy4$p <- predict(msm_nb,newdata = dummy4)
dummy <- rbind(dummy1,dummy2,dummy3,dummy4)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
#facet_wrap(vars(method)) +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
xmax_nb <- -coef(msm_nb)[2]/(2*coef(msm_nb)[3])
## for others
ggplot(data=dummy %>% filter(method=="Negative Binomial")) +
geom_line(aes(x=smokeintensity,y=p)) +
geom_vline(xintercept = xmax_nb,color="red") +
labs(x="Cigarettes Per Day in 1971", y="(Weight @ 1982) - (Weight @ 1971)") +
ggtitle("Weight (kg) Change vs Smoking Intensity") +
theme_bw()
## get the weights (much of this is from HR website links)
newdat <- dat %>%
dplyr::select(wt82_71,seqn,smokeintensity,age,race,sex,income,
education,school,diabetes,hf,tb,polio,
tumor,cholesterol,wtloss) %>%
mutate(sex=as.factor(sex),
race=as.factor(race),
education=as.factor(education),
diabetes=as.factor(diabetes),
hf=as.factor(hf),
tb=as.factor(tb),
polio=as.factor(polio),
tumor=as.factor(tumor),
wtloss=as.factor(wtloss),
age2=I(age**2),
income2=I(income**2),
school2=I(school**2),
cholesterol2=I(cholesterol**2)) %>%
na.omit()
## denominator from the rf
p_den_rf <- predict(rf_fit1,newdata = newdat,type = "response")
dens_den_rf <-dnorm(newdat$smokeintensity,
p_den_rf,
sqrt(sum((p_den_rf-newdat$smokeintensity)**2)/nrow(newdat)))
## denominator from the lm
p_den_lm <- predict(lm_fit1,newdata = newdat,type = "response")
dens_den_lm <-dnorm(newdat$smokeintensity,
p_den_lm,
sqrt(sum((p_den_lm-newdat$smokeintensity)**2)/nrow(newdat)) )
## denominator from poisson reg
p_den_poisson <- predict(poisson_fit1,newdata = newdat,type = "response")
dens_den_poisson <-dpois(newdat$smokeintensity,
lambda=p_den_poisson)
## denominator from neg binom reg
p_den_nb <- predict(nb_fit1,newdata = newdat,type="response")
dens_den_nb <- dnbinom(newdat$smokeintensity,
mu=p_den_nb,
size=nb_fit1$theta)
## random forest
newdat$int <- 1
num_fit_obj_rf <- randomForest(smokeintensity ~ int, data = newdat)
p_num_rf <- predict(num_fit_obj_rf, type = "response")
dens_num_rf <- dnorm(newdat$smokeintensity,
p_num_rf,
sqrt(sum((p_num_rf-newdat$smokeintensity)**2)/nrow(newdat)))
## regression
num_fit_bj_lm <- randomForest(smokeintensity ~ 1, data = newdat)
p_num_lm <- predict(num_fit_obj, type = "response")
dens_num_lm <- dnorm(newdat$smokeintensity,
p_num,
summary(num_fit_obj)$sigma)
## poisson
num_fit_obj_poisson <- glm(smokeintensity ~ 1, family="poisson",
data = newdat)
## random forest
newdat$int <- 1
num_fit_obj_rf <- randomForest(smokeintensity ~ int, data = newdat)
p_num_rf <- predict(num_fit_obj_rf, type = "response")
dens_num_rf <- dnorm(newdat$smokeintensity,
p_num_rf,
sqrt(sum((p_num_rf-newdat$smokeintensity)**2)/nrow(newdat)))
## regression
num_fit_bj_lm <- randomForest(smokeintensity ~ 1, data = newdat)
## regression
num_fit_bj_lm <- lm(smokeintensity ~ 1, data = newdat)
p_num_lm <- predict(num_fit_obj, type = "response")
## regression
num_fit_bj_lm <- lm(smokeintensity ~ 1, data = newdat)
p_num_lm <- predict(num_fit_obj_lm, type = "response")
## regression
num_fit_obj_lm <- lm(smokeintensity ~ 1, data = newdat)
p_num_lm <- predict(num_fit_obj_lm, type = "response")
dens_num_lm <- dnorm(newdat$smokeintensity,
p_num_lm,
summary(num_fit_obj_lm)$sigma)
## poisson
num_fit_obj_poisson <- glm(smokeintensity ~ 1, family="poisson",
data = newdat)
p_num_poisson <- predict(num_fit_obj_poisson, type = "response")
dens_num_poisson <- dpois(newdat$smokeintensity,
p_num_poisson)
## neg binom
num_fit_obj_nb <- glm.nb(smokeintensity ~ 1,
data = newdat)
p_num_nb <- predict(num_fit_obj_nb, type = "response")
dens_num_nb <- dnbinom(newdat$smokeintensity,
mu=p_num_nb,
size=num_fit_obj_nb$theta)
newdat$sw_a_rf <- dens_num_rf / dens_den_rf
newdat$sw_a_lm <- dens_num_lm / dens_den_lm
newdat$sw_a_poisson <- dens_num_poisson / dens_den_poisson
newdat$sw_a_nb <- dens_num_nb / dens_den_nb
summary(newdat$sw_a_rf)
summary(newdat$sw_a_lm)
summary(newdat$sw_a_poisson)
summary(newdat$sw_a_nb)
## fit the marginal structural model with rf weights
msm_rf <- geeglm(wt82_71 ~ smokeintensity + I(smokeintensity**2),
data = newdat,
weights = sw_a_rf,
id = seqn,
corstr = "independence")
summary(msm_rf)
## fit the marginal structural model
msm_lm <- geeglm(wt82_71 ~ smokeintensity + I(smokeintensity**2),
data = newdat,
weights = sw_a_lm,
id = seqn,
corstr = "independence")
summary(msm_lm)
## fit the marginal structural model
msm_poisson <- geeglm(wt82_71 ~ smokeintensity + I(smokeintensity**2),
data = newdat,
weights = sw_a_poisson,
id = seqn,
corstr = "independence")
summary(msm_lm)
## fit the marginal structural model
msm_nb <- geeglm(wt82_71 ~ smokeintensity + I(smokeintensity**2),
data = newdat,
weights = sw_a_nb,
id = seqn,
corstr = "independence")
summary(msm_nb)
coef(msm_rf)
coef(msm_lm)
coef(msm_poisson)
coef(msm_nb)
## create plots showing the estimated relationship
smk_seq <- seq(min(newdat$smokeintensity)-2.5,
max(newdat$smokeintensity)+2.5,
length.out=1e3)
dummy1 <- data.frame(smokeintensity=smk_seq,method="Random Forest")
dummy1$p <- predict(msm_rf,newdata = dummy1)
dummy2 <- data.frame(smokeintensity=smk_seq,method="Normal")
dummy2$p <- predict(msm_lm,newdata = dummy2)
dummy3 <- data.frame(smokeintensity=smk_seq,method="Poisson")
dummy3$p <- predict(msm_poisson,newdata = dummy3)
dummy4 <- data.frame(smokeintensity=smk_seq,method="Negative Binomial")
dummy4$p <- predict(msm_nb,newdata = dummy4)
dummy <- rbind(dummy1,dummy2,dummy3,dummy4)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
#facet_wrap(vars(method)) +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
## fit the marginal structural model
msm_lm <- geeglm(wt82_71 ~ smokeintensity + I(smokeintensity**2),
data = newdat,
weights = sw_a_lm,
id = seqn,
corstr = "independence")
msm_lm
dummy2 <- data.frame(smokeintensity=smk_seq,method="Normal")
dummy2$p <- predict(msm_lm,newdata = dummy2)
dummy3 <- data.frame(smokeintensity=smk_seq,method="Poisson")
dummy3$p <- predict(msm_poisson,newdata = dummy3)
dummy4 <- data.frame(smokeintensity=smk_seq,method="Negative Binomial")
dummy4$p <- predict(msm_nb,newdata = dummy4)
dummy <- rbind(dummy1,dummy2,dummy3,dummy4)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
#facet_wrap(vars(method)) +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
predict(msm_lm,newdata = dummy2)
## create plots showing the estimated relationship
smk_seq <- seq(min(newdat$smokeintensity)-2.5,
max(newdat$smokeintensity)+2.5,
length.out=1e3)
dummy1 <- data.frame(smokeintensity=smk_seq,method="Random Forest")
dummy1$p <- predict(msm_rf,newdata = dummy1)
dummy2 <- data.frame(smokeintensity=smk_seq,method="Normal")
dummy2$p <- predict(msm_lm,newdata = dummy2)
dummy3 <- data.frame(smokeintensity=smk_seq,method="Poisson")
dummy3$p <- predict(msm_poisson,newdata = dummy3)
dummy4 <- data.frame(smokeintensity=smk_seq,method="Negative Binomial")
dummy4$p <- predict(msm_nb,newdata = dummy4)
dummy <- rbind(dummy1,dummy2,dummy3,dummy4)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
#facet_wrap(vars(method)) +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
table(dummy$method)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
#facet_wrap(vars(method)) +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
facet_wrap(vars(method)) +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
summary(newdat$sw_a_poisson)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
facet_wrap(vars(method)) +
geom_hline(yintercept = 0,color="black") +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
facet_wrap(vars(method)) +
geom_hline(yintercept = 0,color="black",linetype="dotted") +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw()
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
facet_wrap(vars(method)) +
geom_hline(yintercept = 0,color="black",linetype="dotted") +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change",
color="Method") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw() +
theme(legend.position = NULL)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
facet_wrap(vars(method)) +
geom_hline(yintercept = 0,color="black",linetype="dotted") +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw() +
theme(legend.position = NULL)
## for the statisticians
ggplot(data=dummy) +
geom_line(aes(x=smokeintensity,y=p,color=method)) +
facet_wrap(vars(method)) +
geom_hline(yintercept = 0,color="black",linetype="dotted") +
labs(x="Smoking Intensity at Baseline", y="Estimated Mean Weight Change") +
ggtitle("Weight Change vs Smoking Intensity") +
theme_bw() +
theme(legend.position = "none")
hist(newdat$sw_a_nb)
summary(newdat$sw_a_nb)
summary(newdat$sw_a_lm)
summary(newdat$sw_a_rf)
summary(newdat$sw_a_poisson)
summary(msm_nb)
## for others
ggplot(data=dummy %>% filter(method=="Negative Binomial")) +
geom_line(aes(x=smokeintensity,y=p)) +
geom_vline(xintercept = xmax_nb,color="red") +
labs(x="Cigarettes Per Day in 1971", y="(Weight @ 1982) - (Weight @ 1971)") +
ggtitle("Weight (kg) Change vs Smoking Intensity") +
theme_bw()
xmax_nb <- -coef(msm_nb)[2]/(2*coef(msm_nb)[3])
## for others
ggplot(data=dummy %>% filter(method=="Negative Binomial")) +
geom_line(aes(x=smokeintensity,y=p)) +
geom_vline(xintercept = xmax_nb,color="red") +
labs(x="Cigarettes Per Day in 1971", y="(Weight @ 1982) - (Weight @ 1971)") +
ggtitle("Weight (kg) Change vs Smoking Intensity") +
theme_bw()
dummy %>% filter(method=="Negative Binomial")
dummy %>% filter(method=="Negative Binomial" & p < 0.1)
dummy %>% filter(method=="Negative Binomial" & 0 < p < 0.1)
dummy %>% filter(method=="Negative Binomial" & p < 0.1 & p>0)
## ----------------------------------------------------------------- ##
## run_sims.R ------------------------------------------------------ ##
## Author: Peter Norwood, NC State University ---------------------- ##
## Purpose: run a simulation experiment with certain inputs -------- ##
## ----------------------------------------------------------------- ##
## load functions
setwd("~/Research/Written Prelim/WrittenPrelim")
source("sims.R")
library(parallel)
## run the simulations
## parameters
p=8
K=2
N=1000
sd_X=1
sd_Y=0.5
t0=(p+1)*K*3+100
eps=0.05
al=0.01
N_post=500
M=100
## how many simulations to run
r <- 100
## Simulate the experiments
start <- Sys.time()
sims <- mclapply(X=1:r,
function(X){sim(N=N,p=p,K=K,sd_X=sd_X,sd_Y=sd_Y,
t0=t0,eps=eps,al=al,N_post=N_post,M=M)},
mc.cores = 1
)
end <- Sys.time()
## check bad sims
good_sets <- c()
tick=1
for(i in 1:r){
check <- c()
for(j in 1:6){
check[j] <- is.data.frame(sims[[i]]$exp[[j]])
}
if(sum(check)==6){
good_sets[tick]=i
tick=tick+1
}else{
## no nothing
}
}
## collect experiment information into one dataframe
exps <- data.frame()
post <- data.frame()
tick <- 1
for(i in good_sets){
## check convergence for simple randomization
exp_simple <- sims[[i]]$exp$train_set
fit <- lm(Y~-1+as.factor(A)+as.factor(A):.-as.factor(A):A,
data=exp_simple)
## gather parameter convergence information
coef_fit <- coef(fit)
theta_hat <- c()
## put them in the same format as the theta vector
tik <- 1
for(ii in 1:K){
for(jj in 0:p){
theta_hat[tik] <- coef_fit[ii+(K)*jj]
tik=tik+1
}
}
## simple norm
simple_norm <- norm(matrix(sims[[i]]$theta-theta_hat),type="F")
## collect experiment information
## pronzato
exp_pronzato <- sims[[i]]$exp$pronzato
exp_pronzato$R <- NA
exp_pronzato$method <- "pronzato"
exp_pronzato$rep <- tick
exp_pronzato$simple_norm <- simple_norm
post_pronzato <- sims[[i]]$post$pronzato
post_pronzato$method <- "pronzato"
post_pronzato$rep <- tick
## e_greedy
exp_e_greedy <- sims[[i]]$exp$e_greedy
exp_e_greedy$R <- NA
exp_e_greedy$method <- "e_greedy"
exp_e_greedy$rep <- tick
exp_e_greedy$simple_norm <- simple_norm
post_e_greedy <- sims[[i]]$post$e_greedy
post_e_greedy$method <- "e_greedy"
post_e_greedy$rep <- tick
## greedy
exp_greedy <- sims[[i]]$exp$greedy
exp_greedy$R <- NA
exp_greedy$method <- "greedy"
exp_greedy$rep <- tick
exp_greedy$simple_norm <- simple_norm
post_greedy <- sims[[i]]$post$greedy
post_greedy$method <- "greedy"
post_greedy$rep <- tick
## greedy first
exp_greedy_first <- sims[[i]]$exp$greedy_first
exp_greedy_first$method <- "greedy_first"
exp_greedy_first$rep <- tick
exp_greedy_first$simple_norm <- simple_norm
post_greedy_first <- sims[[i]]$post$greedy_first
post_greedy_first$method <- "greedy_first"
post_greedy_first$rep <- tick
## IDS_freq
exp_IDS_freq <- sims[[i]]$exp$IDS_freq
exp_IDS_freq$R <- NA
exp_IDS_freq$method <- "IDS_freq"
exp_IDS_freq$rep <- tick
exp_IDS_freq$simple_norm <- simple_norm
post_IDS_freq <- sims[[i]]$post$IDS_freq
post_IDS_freq$method <- "IDS_freq"
post_IDS_freq$rep <- tick
## IDS_bayes
exp_IDS_bayes <- sims[[i]]$exp$IDS_bayes
exp_IDS_bayes$R <- NA
exp_IDS_bayes$method <- "IDS_bayes"
exp_IDS_bayes$rep <- tick
exp_IDS_bayes$simple_norm <- simple_norm
post_IDS_bayes <- sims[[i]]$post$IDS_bayes
post_IDS_bayes$method <- "IDS_bayes"
post_IDS_bayes$rep <- tick
## simple
post_simple <- sims[[i]]$post$simple
post_simple$method <- "simple"
post_simple$rep <- tick
## create out of trial information
## attach these datasets to the bigger one
exps <- rbind(exps,exp_pronzato,exp_greedy,exp_e_greedy,
exp_greedy_first,exp_IDS_freq,exp_IDS_bayes)
post <- rbind(post,post_pronzato,post_greedy,post_e_greedy,
post_greedy_first,post_IDS_freq,post_IDS_bayes,post_simple)
## update the tick
tick=tick+1
}
## save trial information
exps$K<- K
exps$p <- p
post$K <- K
post$p <- p
save(exps,file=paste0("exps_K=",K,"_p=",p,".RData"))
save(post,file=paste0("post_K=",K,"_p=",p,".RData"))
# burn_in=(p+1)*K*3
#
# exps %>%
#   filter(sub>burn_in) %>%
#   group_by(method) %>%
#   summarise(mean(regret))
#
# exps %>%
#   filter(sub>t0 & method=="greedy_first") %>%
#   summarise(mean(R))
#
# convergence <- exps %>%
#   filter(sub>burn_in) %>%
#   group_by(method,sub) %>%
#   summarise(norm=mean(norm))
#
# ggplot(exps %>% filter(sub==N)) +
#   geom_boxplot(aes(x=method,y=norm/simple_norm))
#
# regret <- exps %>%
#   filter(sub>burn_in) %>%
#   group_by(method,rep) %>%
#   mutate(cum_regret=cumsum(regret)) %>%
#   group_by(method,sub) %>%
#   summarise(cum_regret=mean(cum_regret))
#
# opt <- exps %>%
#   filter(sub>burn_in) %>%
#   mutate(opt=ifelse(regret==0,1,0)) %>%
#   group_by(method,rep) %>%
#   mutate(cum_opt=cumsum(opt),
#          cum_prop=cum_opt/sub) %>%
#   group_by(method,sub) %>%
#   summarise(cum_opt=mean(cum_prop))
#
# ggplot(data=opt) +
#   geom_line(aes(x=sub,y=cum_opt,color=method))
#
# ggplot(data=convergence) +
#   geom_line(aes(x=sub,y=norm,color=method))
#
# ggplot(data=regret) +
#   geom_line(aes(x=sub,y=cum_regret,color=method))
#
#
# post %>%
#   group_by(method) %>%
#   summarise(mean(correct))
#
# post %>%
#   group_by(method) %>%
#   summarise(mean(regret))
